type Query {
  me: User
  dashboard(groupId: ID!): Dashboard!
  groups: Groups!
  artists(groupId: ID!): Artists!
  positions(groupId: ID!): [Position]!
  genres(groupId: ID!): Genres!
  keys(groupId: ID!): [Key]!
  songs(groupId: ID!): [Song]!
  sections(songId: ID!): [Section]!
  lines(sectionId: ID!): [Line]!
  comments(lineId: ID!): Comments!
  events(groupId: ID!): [Event]!
}

type Mutation {
  # auth
  login(email: String!, password: String!): User
  logout: Boolean

  # user
  signup(
    email: String!
    password: String!
    firstName: String!
    lastName: String!
  ): Boolean
  updateUser(
    id: ID!
    firstName: String
    lastName: String
    displayName: String
    password: String
  ): User
  deleteUser(id: ID!): Boolean

  # group
  createGroup(title: String!, type: String!): Groups!
  updateGroup(id: ID!, title: String, type: String): Groups!
  deleteGroup(id: ID!): Groups!

  # group position
  createPosition(groupId: ID!, title: String!, userId: ID): [Position]!
  updatePosition(positionId: ID!, title: String!, userId: ID): [Position]!
  deletePosition(positionId: ID!): [Position]!

  # genre
  createGenre(groupId: ID!, title: String!): Genres!
  updateGenre(id: ID!, title: String!): Genres!
  deleteGenre(id: ID!): Genres!
  deleteManyGenres(ids: [ID]!): Genres!

  # key
  createKey(groupId: ID!, title: String!): [Key]!
  updateKey(id: ID!, title: String!): [Key]!
  deleteKey(id: ID!): [Key]!
  deleteManyKeys(ids: [ID]!): Boolean

  # artist
  createArtist(groupId: ID!, title: String!): Artists!
  updateArtist(groupId: ID!, id: ID!, title: String!): Artists!
  deleteArtist(groupId: ID!, id: ID!): Artists!

  # song
  createSong(
    groupId: ID!
    title: String!
    genreId: ID
    artistId: ID
    keyId: ID
    duration: Int
  ): [Song]!
  updateSong(
    id: ID!
    title: String
    genreId: ID
    artistId: ID
    keyId: ID
    duration: Int
  ): [Song]!
  deleteSong(id: ID!): [Song]!

  # section
  createSection(songId: ID!, title: String!): [Section]!
  updateSection(id: ID!, title: String!): [Section]!
  deleteSection(id: ID!): [Section]

  # line
  createLine(sectionId: ID!, content: String!, type: String!): [Line]!
  updateLine(id: ID!, content: String, type: String): [Line]!
  deleteLine(id: ID!): [Line]!

  # comment
  createComment(lineId: ID!, comment: String!): Comments!
  updateComment(lineId: ID!, id: ID!, comment: String!): Comments!
  deleteComment(lineId: ID!, id: ID!): Comments!

  # event
  createEvent(
    groupId: ID!
    attendees: [AttendeeInput]!
    subject: String!
    startDateTime: Int!
    endDateTime: Int!
    description: String
  ): [Event]!
  updateEvent(
    id: ID!
    attendees: [AttendeeInput]!
    subject: String!
    startDateTime: Int!
    endDateTime: Int!
    description: String
  ): [Event]!
  deleteEvent(id: ID!): [Event]!
  deleteManyEvents(ids: [ID]!): Boolean
}

# user

type User {
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
  displayName: String
  password: String
  emailVerified: Boolean
  onboarded: Boolean
  token: String
  groups: [Group]!
}

# dashboard

type Dashboard {
  songCount: Int!
  genreCount: Int!
}

# group

type Groups {
  total: Int!
  results: [Group]!
}

type Group {
  id: ID!
  title: String!
  slug: String!
  type: String!
  manager: User!
  positions: [Position!]!
  genres: [Genre!]!
  keys: [Key!]!
  artists: [Artist!]!
  songs: [Song!]!
  events: [Event!]!
}

type Position {
  id: ID
  title: String!
  userId: ID
}

# genre

type Genres {
  total: Int!
  results: [Genre]!
}

type Genre {
  id: ID!
  title: String!
  groupId: ID!
  slug: String
}

# key

type Key {
  id: ID!
  title: String!
  groupId: ID!
}

# artist

type Artists {
  total: Int!
  results: [Artist]!
}

type Artist {
  id: ID!
  title: String!
  slug: String!
  groupId: ID!
}

# song

type Song {
  id: ID!
  title: String!
  genre: Genre
  artist: Artist
  key: Key
  duration: Int
  sections: [Section]!
}

type Section {
  id: ID!
  title: String!
  lines: [Line]!
}

type Line {
  id: ID!
  content: String!
  type: String!
  comments: [Comment]
}

# Comment

type Comments {
  total: Int!
  results: [Comment]!
}

type Comment {
  id: ID!
  comment: String!
  user: User!
}

type Attendee {
  email: String!
  name: String
  user: User
  optional: Boolean
}

input AttendeeInput {
  email: String!
  name: String
  userId: ID!
  optional: Boolean
}

type Event {
  id: ID!
  groupId: ID!
  creator: User
  attendees: [Attendee]!
  subject: String!
  startDateTime: Int!
  endDateTime: Int!
  description: String
}
